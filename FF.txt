import java.util.*;
public class LASTANDUNFOLLOW{

    static String[][] production;
    static int ntLen;
    static char[] nTerm;
    static String[] flw, fst;

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Non Terminals: ");
        String nt = sc.nextLine();

        ntLen = nt.length();

        nTerm = new char[ntLen];
        nTerm = nt.toCharArray();

        System.out.println("Enter Terminals: ");
        String t = sc.nextLine();

        int tLen = nt.length();

        char[] term = new char[tLen];
        term = t.toCharArray();

        production = new String[ntLen][];

        for(int i=0; i<ntLen; i++){
            System.out.println("Enter num of productions for: "+nTerm[i]);
            int n = sc.nextInt();

            production[i] = new String[n];

            for(int j=0; j<n; j++){
                production[i][j] = sc.next();
            }
        }

        System.out.println(Arrays.deepToString(production));

        fst = new String[ntLen];
        for(int i=0; i<ntLen; i++){
            fst[i] = findFirst(i);
        }

        flw = new String[ntLen];
        for(int i=0; i<ntLen; i++){
            flw[i] = findFollow(i);
        }

        System.out.println("First Set: ");
        for(int i=0; i<ntLen; i++){
            System.out.println(removeDuplicates(fst[i]));
        }

        System.out.println("Follow Set");
        for(int i=0;i<ntLen;i++){
            System.out.println(removeDuplicates(flw[i]));
        }
    }

    public static String findFirst(int i){
        String str="", temp="";
        int found=0;

        for(int j=0; j<production[i].length;j++){

            for(int k=0; k<production[i][j].length(); k++, found=0){

                for(int l=0; l<ntLen; l++){
 
                    if(production[i][j].charAt(k)==nTerm[l]){
                        str = findFirst(l);
                    
                        if(!(str.length()==1 && str.charAt(0)=='#')){
                            temp = temp + str;
                            found=1;
                            break;
                        }
                    }
                }
                if(found==1){
                    if(str.contains("#")){
                        continue;
                    }
                }else{
                    temp = temp + production[i][j].charAt(k);
                    break;
                }
            }
        }
        return temp; 
    } 

    public static String findFollow(int i){
        char pro[], chr[];
        String temp="";
        int found=0;

        if(i==0){
            temp = "$";
        }
        for(int j=0; j<ntLen; j++){
            for(int k=0; k<production[j].length; k++, found=0){
                pro = new char[production[j][k].length()];
                pro = production[j][k].toCharArray();

                for(int l=0;l<pro.length;l++) //entering each production
                {
                    if(pro[l]==nTerm[i]) //finding the non terminal whose follow set is to be found
                    {
                        if(l==pro.length-1) //if it is the last terminal/non-terminal then follow of current non-terminal
                        {
                            if(j<i)
                                temp=temp+flw[j];
                        }
                        else
                        {
                            for(int m=0;m<ntLen;m++)
                            {
                                if(pro[l+1]==nTerm[m]) //first of next non-terminal otherwise (else laterâ€¦)
                                {
                                    chr=new char[fst[m].length()];
                                    chr=fst[m].toCharArray();
                                    for(int n=0;n<chr.length;n++)
                                    {
                                        if(chr[n]=='#') //if first includes epsilon
                                        {
                                            if(l+1==pro.length-1)
                                                temp=temp+findFollow(j); //when non-terminal is second last
                                            else
                                                temp=temp+findFollow(m);
                                        }
                                        else
                                            temp=temp+chr[n]; //include whole first set except epsilon
                                    }
                                    found=1;
                                }
                            }
                            if(found!=1)
                                temp=temp+pro[l+1]; //follow set will include terminal(else is here)
                        }
                    }
                }
            }
        }
        return temp;
    }

    public static String removeDuplicates(String str)
    {
        int i;
        char ch;
        boolean seen[] = new boolean[256];
        StringBuilder sb = new StringBuilder(seen.length);
        for(i=0;i<str.length();i++)
        {
            ch=str.charAt(i);
            if (!seen[ch])
            {
                seen[ch] = true;
                sb.append(ch);
            }
        }
        return sb.toString();
    }
}
